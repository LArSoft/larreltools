#!/bin/bash

# create a basic relase note page for a larsoft release

# Subsidiary packages to be checked, These must be in order.
declare -a packages=(larana larreco larsim larg4 larevt lardata larcore)
declare -a extra_packages=(lareventdisplay larexamples larpandora larsimrad larrecodnn larwirecell)
declare -a obj_packages=(larsoftobj larvecutils lardataobj lardataalg larcorealg larcoreobj)
declare -a util_packages=(webevd)

function get_working_dir() 
{
    cd ${currentDir}
    if [ -d ${working_dir}/${larsoft_version} ]; then
            echo "ERROR: ${working_dir}/${larsoft_version} already exists!"
            exit 5
    fi
    mkdir -p ${working_dir}/${larsoft_version}
    # git the full path
    ( cd / ; /bin/pwd -P ) >/dev/null 2>&1
    if (( $? == 0 )); then
      pwd_P_arg="-P"
    fi
    my_working_dir=`cd ${working_dir}/${larsoft_version} && /bin/pwd ${pwd_P_arg}`
}

function get_version()
{
  local package=$1
  echo "checking package ${package}"
  relver=v`grep '^[  ]*project' ${my_working_dir}/${package}/CMakeLists.txt | grep ${package} | tr -s '[:space:]' | cut -f3 -d " " | sed 's/\./_/g'`
  # possible old style package
  if [[ ${relver} == v ]]; then
    relver=`grep '^[  ]*parent' ${my_working_dir}/${package}/ups/product_deps | tr "\t" " " | cut -f3 -d" "`
  fi
  # dealing with larpandoracontent
  if [[ ${relver} == vVERSION ]]; then
    relver=v`grep '^[  ]*project' ${my_working_dir}/${package}/CMakeLists.txt | grep ${package} | tr -s '[:space:]' | cut -f4 -d " " | sed 's/\./_/g' | sed 's/)//'`
  fi
  echo "Found ${package} version ${relver}"
}


function get_package_release()
{
  local pkg=$1
  local skip_pkg="false"
  pv=`grep    -e '^[ 	]*'"$pkg"'[ 	]\{1,\}' ${my_working_dir}/${last_pkg}/ups/product_deps | \
   sed -e 's/^[ 	]*'"$pkg"'[ 	]\{1,\}\(v[^ 	]*\).*$/\1/'`
  if [[ -n "$pv" ]]; then
    echo "Found $package tag $pv corresponding to LArSoft tag $larsoft_version."
  else
    echo "INFO: Could not find tag for package $package corresponding to LArSoft tag $larsoft_version." 1>&2
    echo "      Will try LARSOFT_SUITE_${larsoft_version}"
    pv=LARSOFT_SUITE_${larsoft_version}
    continue
  fi
  set -x
  cd ${my_working_dir}
  git clone ${repository}/${pkg}${suffix} || { echo "ERROR: failed to clone ${pkg}"; exit 1; }
  cd ${my_working_dir}/${pkg}
  git checkout ${previous_version_string} || \
    { echo "${pkg} has no ${previous_version_string} tag"; skip_pkg="true"; }
  if [[ ${skip_pkg} == "true" ]]; then
    prever=0;
  else
    get_version ${pkg}
    prever=${relver}
  fi
  skip_pkg="false"
  git checkout ${pv} || \
     { echo "${pkg} has no ${pv} tag"; skip_pkg="true"; }
  if [[ ${skip_pkg} == "true" ]]; then
    relver=0;
  else
    get_version ${pkg}
  fi
  echo "Found ${pkg} ${relver} ${prever}"
  if [[ ${skip_pkg} != "true" ]]; then
    echo >> ${relnote}
    echo "h2. ${pkg} ${relver}" >> ${relnote}
    echo >> ${relnote}
    if [[ ${prever} != ${relver} ]]; then
      echo "* \"changes since ${prever}\":${repository}/${pkg}/compare/${prever}...${relver}" >> ${relnote}
      echo >> ${relnote}
    fi
  fi
  cd ${my_working_dir}
  set +x
}

function get_util_release()
{
  local pkg=$1
  local skip_pkg="false"
  set -x
  cd ${my_working_dir}
  git clone ${repository}/${pkg}${suffix} || { echo "ERROR: failed to clone ${pkg}"; exit 1; }
  cd ${my_working_dir}/${pkg}
  git checkout ${previous_version_string} || \
    { echo "${pkg} has no ${previous_version_string} tag"; skip_pkg="true"; }
  if [[ ${skip_pkg} == "true" ]]; then
    prever=0;
  else
    get_version ${pkg}
    prever=${relver}
  fi
  skip_pkg="false"
  git checkout LARSOFT_SUITE_${larsoft_version} || \
     { echo "${pkg} has no LARSOFT_SUITE_${larsoft_version} tag"; skip_pkg="true"; }
  if [[ ${skip_pkg} == "true" ]]; then
    relver=0;
  else
    get_version ${pkg}
  fi
  echo "Found ${pkg} ${relver} ${prever}"
  #relver=`grep '^[  ]*parent' ${my_working_dir}/${pkg}/ups/product_deps | tr "\t" " " | cut -f3 -d" "`
  if [[ ${skip_pkg} != "true" ]]; then
    echo >> ${relnote}
    echo "h2. ${pkg} ${relver}" >> ${relnote}
    echo >> ${relnote}
    if [[ ${prever} != ${relver} ]]; then
      echo "* \"changes since ${prever}\":${repository}/${pkg}/compare/${prever}...${relver}" >> ${relnote}
      echo >> ${relnote}
    fi
  fi
  cd ${my_working_dir}
  set +x
}

function find_larsoftobj_release()
{
  mkdir -p ${my_working_dir}/tmp
  cd ${my_working_dir}/tmp
  git clone ${repository}/larsoftobj${suffix} || { echo "ERROR: failed to clone larsoftobj"; exit 1; }
  cd larsoftobj
  git checkout LARSOFT_SUITE_${larsoft_version} || \
     { echo "ERROR: could not find LARSOFT_SUITE_${larsoft_version} tag for larsoftobj"; exit 1; }
  # special case
  larsoftobj_version=v`grep '^[  ]*project' CMakeLists.txt | grep larsoftobj | tr -s '[:space:]' | cut -f3 -d " " | sed 's/\./_/g'`
  #larsoftobj_version=`grep '^[  ]*parent' ups/product_deps | tr "\t" " " | cut -f3 -d" "`
  # possible old style package
  if [[ ${larsoftobj_version} == v ]]; then
    larsoftobj_version=`grep '^[  ]*parent' ups/product_deps | tr "\t" " " | cut -f3 -d" "`
  fi
  echo "found larsoftobj_version ${larsoftobj_version}"
  if [[ -n "$larsoftobj_version" ]]; then
    echo "INFO: Found larsoftobj $larsoftobj_version corresponding to LArSoft tag $larsoft_version."
  else
    echo "ERROR: Could not find larsoftobj tag." 1>&2
    exit 1
  fi
  cd ${my_working_dir}
}

################################################################################

prog=${0##*/}

function usage() {
    cat 1>&2 <<EOF
${prog} --help|-h|-\?
${prog} <working_directory> <tag> <previous tag>
EOF
}

getopt -T >/dev/null 2>&1
if (( $? != 4 )); then
  echo "ERROR: GNU getopt required! Check SETUP_GETOPT and PATH." 1>&2
  exit 1
fi

TEMP=`getopt -n "$prog" -o ':h\?' --long help -- "${@}"`
currentDir=${PWD}

eval set -- "$TEMP"
while true; do
  case $1 in
    --help|-h|-\?)
      usage
      exit 1
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Bad argument \"$1\"" 1>&2
      usage
      exit 1
  esac
done

[[ -z "$1" ]] && { 
  echo "Require working directory as non-option argument" 1>&2; usage; exit 1; }
[[ -z "$2" ]] && { echo "Require existing LArSoft tag as non-option argument" 1>&2; usage; exit 1; }
[[ -z "$3" ]] && { echo "Require previous LArSoft tag as non-option argument" 1>&2; usage; exit 1; }

working_dir=$1
larsoft_version=$2
previous_version=$3

# create ${working_dir}/${larsoft_version}
get_working_dir

today=`date +%m/%d/%Y`
dotver=`echo ${larsoft_version} | sed -e 's%_%.%g'`
version_string=`echo ${larsoft_version} | sed -e 's/_//g' | sed -e 's/^v//'`

previous_version_string=LARSOFT_SUITE_${previous_version}
if [[ ${previous_version} == *_rc* ]]; then
  echo "${previous_version} is a release candidate"
  previous_version_string=${previous_version}
fi

#repository=http://cdcvs.fnal.gov/projects
repository=https://github.com/LArSoft
suffix=.git

find_larsoftobj_release

relnote=${my_working_dir}/ReleaseNotes-${larsoft_version}
rm -f ${relnote}
echo > ${relnote}
echo "| ${larsoft_version} | ${larsoftobj_version} | ${today} |  |  | [[ReleaseNotes${version_string}|Release Notes]] |">> ${relnote}
echo >> ${relnote}
echo "h1. LArSoft ${larsoft_version} Release Notes" >> ${relnote}
echo >> ${relnote}
echo "{{>TOC}}" >> ${relnote}
echo >> ${relnote}
echo "[[LArSoft_release_list|list of LArSoft releases]]" >> ${relnote}
echo "Download instructions for \"larsoft ${larsoft_version}\":http://scisoft.fnal.gov/scisoft/bundles/larsoft/${larsoft_version}/larsoft-${larsoft_version}.html" >> ${relnote}
echo "Download instructions for \"just larsoftobj ${larsoftobj_version}\":http://scisoft.fnal.gov/scisoft/bundles/larsoftobj/${larsoftobj_version}/larsoftobj-${larsoftobj_version}.html" >> ${relnote}
echo >> ${relnote}
echo "h2. Purpose" >> ${relnote}
echo >> ${relnote}
echo "* requested patch release" >> ${relnote}
echo >> ${relnote}
echo "h2. New features" >> ${relnote}
echo >> ${relnote}
echo "h2. Bug fixes" >> ${relnote}
echo >> ${relnote}
echo "h2. Updated dependencies" >> ${relnote}
echo >> ${relnote}
echo "h1. Change List" >> ${relnote}
echo >> ${relnote}

set -x
cd ${my_working_dir}
pkg=larsoft
git clone ${repository}/${pkg}${suffix} || { echo "ERROR: failed to clone ${pkg}"; exit 1; }
cd ${my_working_dir}/${pkg}
git checkout ${previous_version_string}
  get_version ${pkg}
  prever=${relver}
#prever=v`grep '^[  ]*project' ${my_working_dir}/${pkg}/CMakeLists.txt | grep ${pkg} | tr -s '[:space:]' | cut -f3 -d " " | sed 's/\./_/g'`
git checkout ${larsoft_version}
  get_version ${pkg}
#relver=v`grep '^[  ]*project' ${my_working_dir}/${pkg}/CMakeLists.txt | grep ${pkg} | tr -s '[:space:]' | cut -f3 -d " " | sed 's/\./_/g'`
echo "h2. ${pkg} ${relver}" >> ${relnote}
echo >> ${relnote}
if [[ ${prever} != ${relver} ]]; then
  echo "* \"changes since ${prever}\":${repository}/${pkg}/compare/${prever}...${larsoft_version}" >> ${relnote}
  echo >> ${relnote}
fi
echo >> ${relnote}
cd ${my_working_dir}
set +x
last_pkg=larsoft

for package in "${extra_packages[@]}"; do
  last_pkg=larsoft
  get_package_release ${package}
done
last_pkg=larsoft

for package in "${packages[@]}"; do
  get_package_release ${package}
  last_pkg=${package}
done

# larpandoracontent needs special handling
package=larpandoracontent
get_util_release ${package}

for package in "${obj_packages[@]}"; do
  get_util_release ${package}
done

for package in "${util_packages[@]}"; do
  get_util_release ${package}
done

