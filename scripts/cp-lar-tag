#!/bin/bash
########################################################################
# cp-tag
#
# LArSoft-specific cross-package tagger.
#
# Requires MANAGER role on all packages to be tagged (including larsoft).
#
#
# Takes at least one version argument,
########################################################################

# Subsidiary packages to be tagged, These must be in order: ie package
# n's product_list must set up package n+1.
declare -a packages=(larana larreco larsim  larevt lardata larcore)
declare -a extra_packages=(lareventdisplay larexamples larg4 larpandora larwirecell)
declare -a obj_packages=(lardataobj larcoreobj)
declare -a alg_packages=(lardataalg larcorealg)
# Tag message.
tag_msg='LArSoft suite cross-package tag'

function ensure_gitconfig() {
    local package=$1
    ssh p-$1@cdcvs.fnal.gov "git config --global user.name '$package admin'"
}

function maybe_tag() {
    local tag=$1
    shift
    cat <<EOF
git tag | grep -qe '^'"$tag"'\$' && echo "tag $tag already exists: doing nothing." || \
  { echo "applying tag $tag."; git tag -am '$tag_msg' '$tag' "$*" && git update-server-info; }
EOF
}

function ptag() {
    local package=$1
    local tag=$2
    local pv=$3
    printf "Tagging version $pv of $package with cross-package tag $tag: "
    ssh p-$1@cdcvs.fnal.gov "cd '/cvs/projects/${package}' && `maybe_tag $tag \"$pv\"`"
}

function product_for() {
  local package=$1
  case $package in
      fhicl-cpp)
        echo "fhiclcpp"
      ;;
      *)
        echo "$package"
  esac
}

prog=${0##*/}

function usage() {
    cat 1>&2 <<EOF
${prog} --help|-h|-\?
${prog} <larsoft tag> <larsoftobj tag>
EOF
}

getopt -T >/dev/null 2>&1
if (( $? != 4 )); then
  echo "ERROR: GNU getopt required! Check SETUP_GETOPT and PATH." 1>&2
  exit 1
fi

TEMP=`getopt -n "$prog" -o ':h\?' --long help -- "${@}"`

eval set -- "$TEMP"
while true; do
  case $1 in
    --help|-h|-\?)
      usage
      exit 1
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Bad argument \"$1\"" 1>&2
      usage
      exit 1
  esac
done

[[ -z "$1" ]] && { usage; exit 1; }
[[ -z "$2" ]] && { usage; exit 1; }

  larsoft_version=$1
  larsoftobj_version=$2

  ensure_gitconfig larsoft
  ssh p-larsoft@cdcvs.fnal.gov "cd /cvs/projects/larsoft && { git tag | grep -q $larsoft_version || { echo 'Unable to find LArSoft tag ${larsoft_version}' 1>&2; exit 1; }; } && `maybe_tag \"LARSOFT_SUITE_${larsoft_version}\" \"${larsoft_version}\"`"

  ensure_gitconfig larsoftobj
  ssh p-larsoftobj@cdcvs.fnal.gov "cd /cvs/projects/larsoftobj && { git tag | grep -q $larsoftobj_version || { echo 'Unable to find LArSoft tag ${larsoftobj_version}' 1>&2; exit 1; }; } && `maybe_tag \"LARSOFT_SUITE_${larsoft_version}\" \"${larsoftobj_version}\"`"

  last_pkg=larsoft
  for package in "${packages[@]}"; do
    product=`product_for "$package"`
    pv=`wget --no-check-certificate -q -O - "https://cdcvs.fnal.gov/redmine/projects/${last_pkg}/repository/raw/ups/product_deps?rev=LARSOFT_SUITE_${larsoft_version}" | \
     grep    -e '^[ 	]*'"$product"'[ 	]\{1,\}' | \
     sed -e 's/^[ 	]*'"$product"'[ 	]\{1,\}\(v[^ 	]*\).*$/\1/'`
    if [[ -n "$pv" ]]; then
      echo "Found $package tag $pv corresponding to LArSoft tag $larsoft_version."
    else
      echo "Could not find tag for package $package corresponding to LArSoft tag $larsoft_version." 1>&2
      continue
    fi
    ensure_gitconfig $package
    ptag "${package}" "LARSOFT_SUITE_${larsoft_version}" "${pv}"
    last_pkg=${package}
  done

  last_pkg=larsoft
  for package in "${extra_packages[@]}"; do
    product=`product_for "$package"`
    pv=`wget --no-check-certificate -q -O - "https://cdcvs.fnal.gov/redmine/projects/${last_pkg}/repository/raw/ups/product_deps?rev=LARSOFT_SUITE_${larsoft_version}" | \
     grep    -e '^[ 	]*'"$product"'[ 	]\{1,\}' | \
     sed -e 's/^[ 	]*'"$product"'[ 	]\{1,\}\(v[^ 	]*\).*$/\1/'`
    if [[ -n "$pv" ]]; then
      echo "Found $package tag $pv corresponding to LArSoft tag $larsoft_version."
    else
      echo "Could not find tag for package $package corresponding to LArSoft tag $larsoft_version." 1>&2
      continue
    fi
    ensure_gitconfig $package
    ptag "${package}" "LARSOFT_SUITE_${larsoft_version}" "${pv}"
  done
  
  # larpandoracontent
  last_pkg=larpandora
  package=larpandoracontent
  product=`product_for "$package"`
  pv=`wget --no-check-certificate -q -O - "https://cdcvs.fnal.gov/redmine/projects/${last_pkg}/repository/raw/ups/product_deps?rev=LARSOFT_SUITE_${larsoft_version}" | \
   grep    -e '^[ 	]*'"$product"'[ 	]\{1,\}' | \
   sed -e 's/^[ 	]*'"$product"'[ 	]\{1,\}\(v[^ 	]*\).*$/\1/'`
  if [[ -n "$pv" ]]; then
    echo "Found $package tag $pv corresponding to LArSoft tag $larsoft_version."
  else
    echo "Could not find tag for package $package corresponding to LArSoft tag $larsoft_version." 1>&2
    continue
  fi
  ensure_gitconfig $package
  ptag "${package}" "LARSOFT_SUITE_${larsoft_version}" "${pv}"
  
  # larsoftobj packages
  last_pkg=larsoftobj
  for package in "${obj_packages[@]}"; do
    product=`product_for "$package"`
    pv=`wget --no-check-certificate -q -O - "https://cdcvs.fnal.gov/redmine/projects/${last_pkg}/repository/raw/ups/product_deps?rev=LARSOFT_SUITE_${larsoft_version}" | \
     grep    -e '^[ 	]*'"$product"'[ 	]\{1,\}' | \
     sed -e 's/^[ 	]*'"$product"'[ 	]\{1,\}\(v[^ 	]*\).*$/\1/'`
    if [[ -n "$pv" ]]; then
      echo "Found $package tag $pv corresponding to LArSoft tag $larsoft_version."
    else
      echo "Could not find tag for package $package corresponding to LArSoft tag $larsoft_version." 1>&2
      continue
    fi
    ensure_gitconfig $package
    ptag "${package}" "LARSOFT_SUITE_${larsoft_version}" "${pv}"
    last_pkg=${package}
  done

  last_pkg=larsoftobj
  for package in "${alg_packages[@]}"; do
    product=`product_for "$package"`
    pv=`wget --no-check-certificate -q -O - "https://cdcvs.fnal.gov/redmine/projects/${last_pkg}/repository/raw/ups/product_deps?rev=LARSOFT_SUITE_${larsoft_version}" | \
     grep    -e '^[ 	]*'"$product"'[ 	]\{1,\}' | \
     sed -e 's/^[ 	]*'"$product"'[ 	]\{1,\}\(v[^ 	]*\).*$/\1/'`
    if [[ -n "$pv" ]]; then
      echo "Found $package tag $pv corresponding to LArSoft tag $larsoft_version."
    else
      echo "Could not find tag for package $package corresponding to LArSoft tag $larsoft_version." 1>&2
      continue
    fi
    ensure_gitconfig $package
    ptag "${package}" "LARSOFT_SUITE_${larsoft_version}" "${pv}"
    last_pkg=${package}
  done


echo
echo "These packages have not been tagged: larbatch larutils"
echo
