#!/bin/bash
########################################################################
# cp-patch-tag
#
# LArSoft-specific cross-package tagger.
# This variation is just for patch releases.  
# It will not attempt to tag larutils or larbatch.
#
# Requires level 1 permissions on all packages to be tagged
# clone larsoft and use releaseDB/CMakeLists.txt
#
########################################################################

# Subsidiary packages to be checked.
declare -a packages=(larana larreco larrecodnn larsim larsimrad larevt lardata larcore lareventdisplay larexamples larg4 larpandora larpandoracontent larwirecell larsoftobj larvecutils lardataobj lardataalg larcorealg larcoreobj webevd)

# Tag message.
tag_msg='LArSoft suite cross-package tag'

function get_working_dir() 
{
    cd ${currentDir}
    if [ -d ${working_dir}/${larsoft_version} ]; then
            echo "ERROR: ${working_dir}/${larsoft_version} already exists!"
            exit 5
    fi
    mkdir -p ${working_dir}/${larsoft_version}
    # git the full path
    ( cd / ; /bin/pwd -P ) >/dev/null 2>&1
    if (( $? == 0 )); then
      pwd_P_arg="-P"
    fi
    my_working_dir=`cd ${working_dir}/${larsoft_version} && /bin/pwd ${pwd_P_arg}`
}

function maybe_tag() {
    local tag=$1
    local oldtag=$2
    git tag | grep -qe '^'"$tag"'\$' && echo "tag $tag already exists: doing nothing." || \
      { echo "applying tag $tag."; git tag -a -m'$tag_msg' "${tag}" "${oldtag}^{}" && git push origin "${tag}"; }
}

function get_package_release()
{
  # check larsoft/releaseDB/CMakeLists.txt
  local pkg=$1
  local pkgmatch="\<${pkg}\>"
  local pkgline=`grep "${pkgmatch}" ${my_working_dir}/larsoft/releaseDB/CMakeLists.txt | grep create_product_variables`
  # The 'xargs echo' on the end trims leading/trailing whitespace
  pkgver=`echo ${pkgline} | sed -e 's%create_product_variables%%' | sed -e 's%(%%' | sed -e 's%)%%' | sed -e s%${pkg}%% | xargs echo`
  if (( `echo ${pkgver} | wc -w` != 1 )); then
     echo "INFO: bad match for $pkg in ${my_working_dir}/larsoft/releaseDB/CMakeLists.txt"
     echo "      will skip $pkg"
     pkgver=0
  fi
  ##echo "Found $pkg tag $pkgver corresponding to LArSoft tag $larsoft_version."
}

################################################################################

prog=${0##*/}

function usage() {
    cat 1>&2 <<EOF
${prog} --help|-h|-\?
${prog} <working_directory> <existing branch> <tag>
EOF
}

getopt -T >/dev/null 2>&1
if (( $? != 4 )); then
  echo "ERROR: GNU getopt required! Check SETUP_GETOPT and PATH." 1>&2
  exit 1
fi

TEMP=`getopt -n "$prog" -o ':h\?' --long help -- "${@}"`
currentDir=${PWD}

eval set -- "$TEMP"
while true; do
  case $1 in
    --help|-h|-\?)
      usage
      exit 1
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Bad argument \"$1\"" 1>&2
      usage
      exit 1
  esac
done

[[ -z "$1" ]] && { 
  echo "Require working directory as non-option argument" 1>&2; usage; exit 1; }
[[ -z "$2" ]] && { echo "Require existing LArSoft tag as non-option argument" 1>&2; usage; exit 1; }

working_dir=$1
patch_branch=$2
larsoft_version=$3

# create ${working_dir}/${larsoft_version}
get_working_dir

# git@github.com:LArSoft/larcore.git
repository="git@github.com:LArSoft"
suffix=.git
suite_tag=LARSOFT_SUITE_${larsoft_version}

# start with larsoft
cd ${my_working_dir}
package=larsoft
set -x
git clone ${repository}/${package}${suffix} || { echo "ERROR: failed to clone ${package}"; exit 1; }
set +x
cd ${my_working_dir}/${package}
git checkout ${patch_branch} || { echo "ERROR: failed to checkout ${patch_branch} for ${package}"; exit 1; }
echo "Apply ${suite_tag} to ${package} ${larsoft_version}"
maybe_tag "${suite_tag}" "${larsoft_version}"

# now tag everything else
for package in "${packages[@]}"; do
  get_package_release ${package}
  if [[ ${pkgver} != 0 ]]; then
  echo "Found ${package} tag ${pkgver} corresponding to LArSoft tag ${larsoft_version}."
  cd ${my_working_dir}
  git clone ${repository}/${package}${suffix} || { echo "ERROR: failed to clone ${package}"; exit 1; }
  cd ${my_working_dir}/${package}
  skip_package="false"
  git checkout ${patch_branch} || \\
    { echo "INFO: failed to checkout ${patch_branch} for ${package}, will skip"; skip_package="true"; }
  if [[ ${skip_package} == "false" ]]; then
    echo "Apply ${suite_tag} to ${package} ${pkgver}"
    maybe_tag "${suite_tag}" "${pkgver}"
  fi
  fi
done

exit 0
