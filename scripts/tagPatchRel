#!/usr/bin/env bash

# tag a named branch
# DO NOT merge with master

# Determine this command name
thisComFull=$(basename $0)
fullCom="${thisComFull%.*}"

# Usage function
function usage() {
    echo "Usage: $fullCom <existing branch> <new master tag>"
    echo "   tag the designated branch and push changes to remote"
    echo
    echo "FOR EXPERT USE ONLY"
}

# commit ups/product_deps if necessary
function commit_ups_product_deps() {
    have_ups=`git status -s | grep ups/product_deps | wc -l`
    if (( ${have_ups} != 0 )); then
      git commit -m"${REP} ${version} for larsoft ${masterTag}" ups/product_deps  || exit 1
    fi
    have_cmake=`git status -s | grep CMakeLists.txt | wc -l`
    if (( ${have_cmake} != 0 )); then
      git commit -m"${REP} ${version} for larsoft ${masterTag}" CMakeLists.txt  || exit 1
    fi
    have_changes=`git status -s | wc -l`
    if (( ${have_changes} != 0 )); then
      echo "ERROR: The ${REP} repository contains uncommited changes"
      echo "       Please commit or otherwise deal with these changes"
      git status -s
      exit 1
    fi
}

function maybe_tag() {
    local myver=$1
    have_tag=`git tag | grep '^'"$myver"'\$' | wc -w`
    #echo "checking for ${myver} in  ${REP} - found ${have_tag}"
    have_upstream=`git remote -v | grep upstream | wc -l`
    #echo "have_upstream is ${have_upstream}"
    this_branch=`git status | grep "On branch" | cut -f 3 -d" "`
    #echo "on branch ${this_branch}"
    if (( ${have_tag} > 0 )); then
      echo "tag $myver already exists: doing nothing."
    elif (( ${have_upstream} > 0 )); then
      echo "working on a fork in ${REP}"
      git pull upstream ${branch}
      code_diff=`git diff release/${tag} | wc -l`
      if (( ${code_diff} > 0 )); then
	 echo "${REP} upstream does not match working branch - check and fix"
	 exit 1
      fi
      echo "INFO: tag ${REP} ${version} on branch ${branch}"
      git tag -a -m"${REP} ${version} for larsoft ${masterTag}" ${version}  || exit 1
      git push upstream ${branch} ${version} || exit 1
    elif [[ "${this_branch}" != "${branch}" ]]; then
      echo "ERROR: on branch ${this_branch}"
      echo "       expect to be on branch ${branch}"
      exit 1
    else
      #echo "ready to tag ${REP} on branch ${branch}"
      git pull origin ${branch}
      echo "INFO: tag ${REP} ${version} on branch ${branch}"
      git tag -a -m"${REP} ${version} for larsoft ${masterTag}" ${version}  || exit 1
      git push origin ${branch} ${version} || exit 1
    fi
}

function get_version()
{
  local package=$1
  version=empty
  ##echo "checking package ${package}"
  version=v`grep '^[  ]*project' CMakeLists.txt | grep ${package} | tr -s '[:space:]' | cut -f3 -d " " | sed 's/\./_/g'`
  # possible old style package
  if [[ ${version} == v ]]; then
    version=`grep '^[  ]*parent' ups/product_deps | tr "\t" " " | cut -f3 -d" "`
  fi
  # dealing with larpandoracontent
  if [[ ${version} == vVERSION ]]; then
    version=v`grep '^[  ]*project' CMakeLists.txt | grep ${package} | tr -s '[:space:]' | cut -f4 -d " " | sed 's/\./_/g' | sed 's/)//'`
  fi
  ##echo "Found ${package} ${version}"
}


################################################################################

# Determine command options (just -h for help)
while getopts ":h" OPTION
do
    case $OPTION in
        h   ) usage ; exit 0 ;;
        *   ) echo "ERROR: Unknown option" ; usage ; exit 1 ;;
    esac
done

# Capture the branch and master tag
branch=${1}
masterTag=${2}
if [ -z "${branch}" ]
then
    echo 'ERROR: no branch specified'
    usage
    exit 1
fi
if [ -z "${masterTag}" ]
then
    echo 'ERROR: no master tag specified'
    usage
    exit 1
fi

if [ -z "${MRB_SOURCE}" ]
then
    echo 'ERROR: MRB_SOURCE must be defined'
    echo '       source the appropriate localProductsXXX/setup'
    exit 1
fi

if [ ! -r $MRB_SOURCE/CMakeLists.txt ]; then
    echo "ERROR: $MRB_SOURCE/CMakeLists.txt not found"
    exit 1
fi

# find the directories
# ignore any directory that does not contain ups/product_deps
list=`ls $MRB_SOURCE -1`
for file in $list
do
   if [ -d $file ]
   then
     if [ -r $file/ups/product_deps ]
     then
       pkglist="$file $pkglist"
     fi
   fi
done

get_version larsoft
if [[ ${larsoft_version} != ${masterTag} ]]; then
  echo "ERROR: mismatch between ${masterTag} and larsoft version ${larsoft_version}"
  exit 1
else
  echo "found larsoft_version ${larsoft_version}"
fi
for REP in $pkglist
do
  cd ${MRB_SOURCE}/${REP}
  # make sure we are on the expected branch
  git checkout ${branch}  || exit 1
  get_version ${REP} 
  echo "begin ${REP} ${version}"
  commit_ups_product_deps
  maybe_tag "${version}"
done

exit 0

