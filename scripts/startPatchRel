#!/usr/bin/env bash

# checkout uboone code and larsoft using explicit branches

# Determine this command name
thisComFull=$(basename $0)
fullCom="${thisComFull%.*}"

declare -a packages=(larana larreco larrecodnn larsim larsimrad larevt lardata larcore lareventdisplay larexamples larg4 larpandora larwirecell larsoft larsoftobj lardataobj lardataalg larcorealg larcoreobj larpandoracontent larvecutils)

# Usage function
function usage() {
    echo "Usage: $fullCom [-e <experiment>] [-q <base qualifier>] <working_dir> <new patch tag> <larsoft branch> [<experiment branch>]"
    echo "   create subdirectory <working_dir>/<new patch tag>, run newDev, then checkout code"
    echo "  options:"
    echo "   -q <base qualifier>: create subdirectories the specified qualifier"
    echo "      If the base qualifier (e17, e19, e20, c2, c7, etc.) is not specified,"
    echo "        create subdirectories for e20"
    echo "      To use more than one qualifier (e.g., c7 and 20), "
    echo "        repeat the command with another qualifier."
    echo "   -e <experiment>: checkout larsoft and experiment code"
    echo "      experiment must be one of argoneut, dune, lariat, icarus, sbnd, or uboone"
    echo "      If no experiment is specified, only checkout larsoft."
    echo "   -d - very simple dry run, no changes will be made"
    echo
    echo "FOR EXPERT USE ONLY"

}

create_working_directory() {
  if [ -d ${working_dir}/${newtag} ]
  then
      echo 'INFO:  ${working_dir}/${newtag} already exists!'
      echo 'INFO:  adding build directories for ${basequal}'
  else
      mkdir -p ${working_dir}/${newtag} || \
         { echo "ERROR: failed to create ${working_dir}/${newtag}"; exit 1; }
  fi
  mkdir -p ${working_dir}/${newtag}/${basequal}p  ${working_dir}/${newtag}/${basequal}d || \
    { echo "ERROR: failed to create ${working_dir}/${newtag}/${basequal}p"; exit 1; }
  cd ${working_dir}/${newtag}
  echo "run mrb newDev"
  mrb newDev -f -v ${newtag} -q ${basequal}:prof -T ${basequal}p || exit 1
  mrb newDev -f -v ${newtag} -q ${basequal}:debug -T ${basequal}d || exit 1
  echo "source localProductsXXX/setup"
  source ${basequal}p/localProducts*/setup
  cd $MRB_SOURCE
  echo "checkout larsoft packages"
  for package in "${packages[@]}"; do
    if [ ! -d ${package} ]; then
      mrb g -b ${larbranch} ${package} || \
         { echo "ERROR: failed to clone ${package}"; rm -rf ${package}; }
   fi
  done
  mrb uc
  #mrb g -b ${larbranch} larsoft_suite
  #echo "checkout larsoftobj_suite"
  #mrb g -b ${larbranch} larsoftobj_suite
  # now get the appropriate experiment code
  if [[ ${experiment} == "argoneut" ]]; then
    echo "checkout argoneutcode"
    mrb g argoneutcode
  elif [[ ${experiment} == "dune" ]]; then
    echo "checkout dunetpc"
    mrb g dunetpc
    echo "checkout duneutil"
    mrb g duneutil
  elif [[ ${experiment} == "lariat" ]]; then
    echo "checkout lariatsoft"
    mrb g lariatsoft
    mrb g -d lariatfragments lariat-online-lariatfragments
    mrb g -d lariatutil lardbt-lariatutil
  elif [[ ${experiment} == "icarus" ]]; then
    echo "checkout icaruscode"
    mrb g icaruscode
    mrb g icarusutil
  elif [[ ${experiment} == "sbnd" ]]; then
    echo "checkout sbndcode"
    mrb g sbndcode
    mrb g sbndutil
  elif [[ ${experiment} == "uboone" ]]; then
    echo "checkout uboonecode"
    mrb  g  -b ${expbranch} uboone_suite
  else
    echo "no experiment specified - just checking out larsoft"
  fi
}

##################
# start here

# Determine command options (just -h for help)
while getopts :e:q:dh OPTION
do
    case ${OPTION} in
        e   ) experiment="$OPTARG"; echo "found experiment $OPTARG" ;;
	q   ) basequal="$OPTARG" ;;
        d   ) dry_run=true ;;
        h   ) usage ; exit 0 ;;
        *   ) echo "ERROR: Unknown option" ; usage ; exit 1 ;;
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1

working_dir=${1}
newtag=${2}
larbranch=${3}
expbranch=${4}

mrbt=`type mrb`
echo "mrb is $mrbt"

# Some sanity checks -

# Make sure we have ups
if [ -z ${UPS_DIR} ]
then
   echo "ERROR: please setup ups and mrb"
   exit 1
fi
# Check mrb
if [ -z ${MRB_DIR} ]
then
   echo "ERROR: please setup mrb and define \${MRB_PROJECT}"
   exit 1
fi
if [ -z ${MRB_PROJECT} ]
then
    echo 'ERROR: MRB_PROJECT is not defined.'
    echo '       Please set \${MRB_PROJECT} to the master product (e.g., larsoft, uboone, etc.)'
    exit 1
fi
if [ -z "${working_dir}" ]
then
    echo 'ERROR: no working_dir specified'
    usage
    exit 1
fi
if [ -z "${newtag}" ]
then
    echo 'ERROR: no new tag specified'
    usage
    exit 1
fi
if [ -z "${larbranch}" ]
then
    echo 'ERROR: no larsoft branch specified'
    usage
    exit 1
fi
if [ -z "${expbranch}" ]
then
    echo 'INFO: experiment branch not specified, using ${larbranch}'
    expbranch=${larbranch}
fi
if [ -z "${experiment}" ]
then
    echo 'INFO: no experiment specified'
fi
if [ -z "${basequal}" ]
then
    echo 'INFO: no base qualifier specified, will use e20'
    basequal=e20
fi
if [[ ${dry_run} == "true" ]]; then
  echo "DRY RUN: working_dir is ${working_dir}"
  echo "DRY RUN: newtag is ${newtag}"
  echo "DRY RUN: larbranch is ${larbranch}"
  echo "DRY RUN: expbranch is ${expbranch}"
  echo "DRY RUN: basequal is ${basequal}"
else
  create_working_directory 
fi
  exit 0

