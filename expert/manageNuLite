#!/usr/bin/env bash

# This script automates parts of creating a nulite distribution.

# Determine this command name
thisComFull=$(basename $0)
fullCom="${thisComFull%.*}"

# Usage function
function usage() {
    echo "Usage: $fullCom <start|tag> <tag>"
    echo "Usage: $fullCom feature <new tag>"
    echo "Usage: $fullCom patch <new tag> <existing tag>"
    echo "Usage: $fullCom branch <new branch> <existing tag>"
    echo "Usage: $fullCom tagbranch <existing branch> <new tag>"
    echo "Usage: $fullCom update <major|minor|micro>"
    echo "   start - create release/<tag> branch"
    echo "   feature - create feature/<tag> branch"
    echo "   patch - create release/<tag> branch based on existing tag"
    echo "   branch - create <branch> branch based on existing tag"
    echo "   use - use existing <branch> branch"
    echo "   update - modify product_deps release as specified"
    echo "   tag - merge changes from release/<tag> and tag"
    echo "   tagbranch - tag the designated branch"
    echo
    echo "   This script tags with the release specified on the ups/product_deps parent line"
    echo
    echo "FOR EXPERT USE ONLY"

}

# commit ups/product_deps if necessary
function commit_ups_product_deps() {
    have_ups=`git status -s | grep ups/product_deps | wc -l`
    if (( ${have_ups} != 0 )); then
      git commit -m"${REP} ${version} for nulite ${tag}" ups/product_deps  || exit 1
    fi
    have_changes=`git status -s | wc -l`
    if (( ${have_changes} != 0 )); then
      echo "ERROR: The ${REP} repository contains uncommited changes"
      echo "       Please commit or otherwise deal with these changes"
      git status -s
      exit 1
    fi
}

function maybe_tag() {
    local myver=$1
    have_tag=`git tag | grep '^'"$myver"'\$' | wc -w`
    echo "checking for ${myver} in  ${REP} - found ${have_tag}"
    if (( ${have_tag} > 0 )); then
      if [[ ${REP} == nutools ]]; then
        echo "merge changes in nutools with develop."
	git checkout develop  || exit 1
        git pull  || exit 1
	git merge -m"nulite ${nulite_version}" release/${tag}
	git push origin develop || exit 1
      else
        echo "tag $myver already exists: doing nothing."
      fi 
    else
      echo "ready to tag ${REP}."
      git checkout master  || exit 1
      git pull  || exit 1
      git merge -m"${REP} ${version} for nulite ${nulite_version}" release/${tag}   || exit 1
      git tag -a -m"${REP} ${version} for nulite ${nulite_version}" ${version}  || exit 1
      git checkout develop  || exit 1
      git pull  || exit 1
      git merge -m"nulite ${nulite_version}" release/${tag}  || exit 1
      git push origin master develop ${version} || exit 1
    fi
}

function verify_match() {
    echo "checking nutools and nulite versions"
    nulite_version=`grep nulite ${MRB_SOURCE}/nutools/bundle/CMakeLists.txt | grep create_product_variables | cut -f2 -d"(" | cut -f1 -d")" | tr -s '[:space:]' | sed -e 's/\s*nulite\s*//'`
    echo "found nulite_version ${nulite_version}"
    nutools_version=`grep nutools ${MRB_SOURCE}/nutools/ups/product_deps | grep parent | tr -s '[:space:]' | cut -f3 -d " "`
    echo "found nutools_version ${nutools_version}"
    if [[ ${nulite_version} =~ ${nutools_version} ]]; then
       echo "INFO: nulite ${nulite_version} is compatible with nutools ${nutools_version}"
    else
       echo "ERROR: nutools ${nutools_version} does not match nulite version ${nulite_version}"
       echo "  Please use the following command to update the nulite version"
       echo "    mrb uv nulite ${nutools_version}"
       exit 1
    fi
}

################################################################################

# Determine command options (just -h for help)
while getopts ":h" OPTION
do
    case $OPTION in
        h   ) usage ; exit 0 ;;
        *   ) echo "ERROR: Unknown option" ; usage ; exit 1 ;;
    esac
done

# Capture the tag
flow=${1}
tag=${2}
extra=${3}
if [ -z "${flow}" ]
then
    echo 'ERROR: no options specified'
    usage
    exit 1
fi
if [ -z "${tag}" ]
then
    echo 'ERROR: no tag specified'
    usage
    exit 1
fi

if [ -z "${MRB_SOURCE}" ]
then
    echo 'ERROR: MRB_SOURCE must be defined'
    echo '       source the appropriate localProductsXXX/setup'
    exit 1
fi

if [ ! -r $MRB_SOURCE/CMakeLists.txt ]; then
    echo "$MRB_SOURCE/CMakeLists.txt not found"
    exit 1
fi

# find the directories
# ignore any directory that does not contain ups/product_deps
cd ${MRB_SOURCE}
list=`ls $MRB_SOURCE -1`
for file in $list
do
   if [ -d $file ]
   then
     if [ -r $file/ups/product_deps ]
     then
       pkglist="$file $pkglist"
     fi
   fi
done

if [ "${flow}" = "start" ]
then
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     git checkout develop
     git checkout -b release/${tag}
     okflow=$?
     if [ ! ${okflow} ]
     then
	echo "${REP} git checkout -b release failure: ${okflow}"
	exit 1
     fi
  done
fi

if [ "${flow}" = "feature" ]
then
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     git checkout develop
     git checkout -b feature/${tag}
     okflow=$?
     if [ ! ${okflow} ]
     then
	echo "${REP} git co -b feature failure: ${okflow}"
	exit 1
     fi
  done
fi

if [ "${flow}" = "patch" ]
then
  oldtag=${extra}
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     git checkout ${oldtag}
     git checkout -b release/${tag}
     okflow=$?
     if [ ! ${okflow} ]
     then
	echo "${REP} git checkout -b release failure: ${okflow}"
	exit 1
     fi
  done
fi

if [ "${flow}" = "branch" ]
then
  oldtag=${extra}
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     git checkout ${oldtag}
     git checkout -b ${tag}
     okflow=$?
     if [ ! ${okflow} ]
     then
	echo "${REP} git checkout -b ${tag} failure: ${okflow}"
	exit 1
     fi
  done
fi

if [ "${flow}" = "use" ]
then
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     git checkout ${tag}
     okflow=$?
     if [ ! ${okflow} ]
     then
	echo "${REP} git checkout ${tag} failure: ${okflow}"
	exit 1
     fi
  done
fi

if [ "${flow}" = "update" ]
then
  case  ${tag} in
    major ) ;;
    minor ) ;;
    micro ) ;;
    * ) echo "ERROR: unrecognized option ${tag}"
        echo "       Please specify major, minor, or micro."
	exit 1; ;;
  esac
  echo "calling updateVersion ${tag}"
  updateVersion ${tag}
fi

if [ "${flow}" = "tag" ]
then
  ##echo "calling verify_match"
  ##verify_match
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     # make sure we are on the expected branch
     git checkout release/${tag}  || exit 1
     version=`grep ${REP} ups/product_deps | grep parent | tr -s '[:space:]' | cut -f3 -d " "`
     echo "begin ${REP} ${version}"
     commit_ups_product_deps
     maybe_tag "${version}"
  done
fi

if [ "${flow}" = "tagbranch" ]
then
  for REP in $pkglist
  do
     echo
     cd ${MRB_SOURCE}/${REP}
     # make sure we are on the expected branch
     git checkout ${branch}  || exit 1
     version=`grep ${REP} ups/product_deps | grep parent | tr -s '[:space:]' | cut -f3 -d " "`
     echo "begin ${REP} ${version}"
     commit_ups_product_deps
     git tag -a -m"${REP} ${version} for nulite ${tag}" ${version}  || exit 1
     git push origin ${branch} ${version} || exit 1
  done
fi

exit 0
