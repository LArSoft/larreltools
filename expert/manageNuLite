#!/usr/bin/env bash

# This script automates parts of creating a nulite distribution.

# Determine this command name
thisComFull=$(basename $0)
fullCom="${thisComFull%.*}"

# Usage function
function usage() {
    echo "Usage: $fullCom <start|tag|merge> <tag>"
    echo "Usage: $fullCom feature <new tag>"
    echo "Usage: $fullCom patch <new tag> <existing tag>"
    echo "Usage: $fullCom branch <new branch> <existing tag>"
    echo "Usage: $fullCom tagbranch <existing branch> <new tag>"
    echo "Usage: $fullCom update <major|minor|micro>"
    echo "   start - create release/<tag> branch"
    echo "   feature - create feature/<tag> branch"
    echo "   patch - create release/<tag> branch based on existing tag"
    echo "   branch - create <branch> branch based on existing tag"
    echo "   use - use existing <branch> branch"
    echo "   update - modify product_deps release as specified"
    echo "   tag - merge changes with master and tag"
    echo "   tagbranch - tag the designated branch"
    echo "   merge - merge changes with develop"
    echo
    echo "FOR EXPERT USE ONLY"

}

# Determine command options (just -h for help)
while getopts ":h" OPTION
do
    case $OPTION in
        h   ) usage ; exit 0 ;;
        *   ) echo "ERROR: Unknown option" ; usage ; exit 1 ;;
    esac
done

# Capture the tag
flow=${1}
tag=${2}
extra=${3}
extra_options=${4}
if [ -z "${flow}" ]
then
    echo 'ERROR: no options specified'
    usage
    exit 1
fi
if [ -z "${tag}" ]
then
    echo 'ERROR: no tag specified'
    usage
    exit 1
fi

if [ -z "${MRB_SOURCE}" ]
then
    echo 'ERROR: MRB_SOURCE must be defined'
    echo '       source the appropriate localProductsXXX/setup'
    exit 1
fi

if [ ! -r $MRB_SOURCE/CMakeLists.txt ]; then
    echo "$MRB_SOURCE/CMakeLists.txt not found"
    exit 1
fi

# find the directories
# ignore any directory that does not contain ups/product_deps
list=`ls $MRB_SOURCE -1`
for file in $list
do
   if [ -d $file ]
   then
     if [ -r $file/ups/product_deps ]
     then
       pkglist="$file $pkglist"
     fi
   fi
done

if [ "${flow}" = "start" ]
then
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     git checkout develop
     git checkout -b release/${tag}
     okflow=$?
     if [ ! ${okflow} ]
     then
	echo "${REP} git checkout -b release failure: ${okflow}"
	exit 1
     fi
  done
fi

if [ "${flow}" = "feature" ]
then
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     git checkout develop
     git checkout -b feature/${tag}
     okflow=$?
     if [ ! ${okflow} ]
     then
	echo "${REP} git co -b feature failure: ${okflow}"
	exit 1
     fi
  done
fi

if [ "${flow}" = "patch" ]
then
  oldtag=${extra}
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     git checkout ${oldtag}
     git checkout -b release/${tag}
     okflow=$?
     if [ ! ${okflow} ]
     then
	echo "${REP} git checkout -b release failure: ${okflow}"
	exit 1
     fi
  done
fi

if [ "${flow}" = "branch" ]
then
  oldtag=${extra}
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     git checkout ${oldtag}
     git checkout -b ${tag}
     okflow=$?
     if [ ! ${okflow} ]
     then
	echo "${REP} git checkout -b ${tag} failure: ${okflow}"
	exit 1
     fi
  done
fi

if [ "${flow}" = "use" ]
then
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     git checkout ${tag}
     okflow=$?
     if [ ! ${okflow} ]
     then
	echo "${REP} git checkout ${tag} failure: ${okflow}"
	exit 1
     fi
  done
fi

if [ "${flow}" = "update" ]
then
  case  ${tag} in
    major ) ;;
    minor ) ;;
    micro ) ;;
    * ) echo "ERROR: unrecognized option ${tag}"
        echo "       Please specify major, minor, or micro."
	exit 1; ;;
  esac
  echo "calling updateVersion ${tag}"
  updateVersion ${tag}
fi

if [ "${flow}" = "tag" ]
then
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     version=`grep ${REP} ups/product_deps | grep parent | sed -e 's/[[:space:]]/ /g' | cut -f3 -d " "`
     echo "begin ${REP} ${version}"
     git commit -m"${REP} ${version} for nulite ${tag}" ups/product_deps  || exit 1
     git checkout master  || exit 1
     git merge -m"${REP} ${version} for nulite ${tag}" release/${tag}   || exit 1
     git tag -a -m"${REP} ${version} for nulite ${tag}" ${version}  || exit 1
     git push origin master ${version} || exit 1
  done
fi

if [ "${flow}" = "tagbranch" ]
then
  for REP in $pkglist
  do
     echo
     echo "begin ${REP} ${version}"
     cd ${MRB_SOURCE}/${REP}
     # make sure we are on the expected branch
     git checkout ${branch}  || exit 1
     version=`grep ${REP} ups/product_deps | grep parent | sed -e 's/[[:space:]]/ /g' | cut -f3 -d " "`
     git commit -m"${REP} ${version} for nulite ${tag}" ups/product_deps  || exit 1
     git tag -a -m"${REP} ${version} for nulite ${tag}" ${version}  || exit 1
     git push origin ${branch} ${version} || exit 1
  done
fi

if [ "${flow}" = "merge" ]
then
  for REP in $pkglist
  do
     set -x 
     cd ${MRB_SOURCE}/${REP}
     echo "begin ${REP}"
     ##git checkout master  || exit 1
     ##git pull  || exit 1
     git checkout develop  || exit 1
     git pull  || exit 1
     git merge -m"nulite ${tag}" release/${tag}  || exit 1
     git push origin develop  || exit 1
     ##git branch -d release/${tag}   || exit 1
  done
fi


exit 0
