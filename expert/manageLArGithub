#!/usr/bin/env bash

# This script presumes that you already have a working mrb directory

# Determine this command name
thisComFull=$(basename $0)
fullCom="${thisComFull%.*}"

# Usage function
function usage() {
    echo "Usage: $fullCom <start|commit|pr|tag|merge> <tag>"
    echo "Usage: $fullCom update <major|minor|micro>"
    echo "Usage: $fullCom tagbranch <existing branch> <tag>"
    echo "   start - create release/<tag> branch"
    echo "   update - modify product_deps release as specified"
#    echo "   commit - commit changes in product_deps and push the fork"
#    echo "   pr - initiate a pull request"
    echo "   tag - tag the master branch"
    echo "   tagbranch - tag the specified branch"
    echo "   merge - merge the master branch with develop"
    echo
    echo "FOR EXPERT USE ONLY"

}

# commit ups/product_deps if necessary
function commit_ups_product_deps() {
    have_ups=`git status -s | grep ups/product_deps | wc -l`
    if (( ${have_ups} != 0 )); then
      git commit -m"${REP} ${version} for larsoft ${tag}" ups/product_deps  || exit 1
    fi
    have_cmake=`git status -s | grep CMakeLists.txt | wc -l`
    if (( ${have_cmake} != 0 )); then
      git commit -m"${REP} ${version} for larsoft ${tag}" CMakeLists.txt  || exit 1
    fi
    have_changes=`git status -s | wc -l`
    if (( ${have_changes} != 0 )); then
      echo "ERROR: The ${REP} repository contains uncommited changes"
      echo "       Please commit or otherwise deal with these changes"
      git status -s
      exit 1
    fi
}

function maybe_tag() {
    local myver=$1
    have_tag=`git tag | grep '^'"$myver"'\$' | wc -w`
    #echo "checking for ${myver} in  ${REP} - found ${have_tag}"
    have_upstream=`git remote -v | grep upstream | wc -l`
    #echo "have_upstream is ${have_upstream}"
    if (( ${have_tag} > 0 )); then
      echo "tag $myver already exists: doing nothing."
    elif (( ${have_upstream} > 0 )); then
      echo "working on a fork in ${REP}"
      git checkout master
      git pull upstream master
      code_diff=`git diff release/${tag} | wc -l`
      if (( ${code_diff} > 0 )); then
	 echo "${REP} master does not match release/${tag} - check and fix"
	 exit 1
      fi
      git merge -m"${REP} ${version} for larsoft ${larsoft_version}" release/${tag}   || exit 1
      git tag -a -m"${REP} ${version} for larsoft ${larsoft_version}" ${version}  || exit 1
      git push upstream master ${version} || exit 1
    else
      echo "ready to tag ${REP}"
      git checkout master  || exit 1
      git pull  || exit 1
      git merge -m"${REP} ${version} for larsoft ${larsoft_version}" release/${tag}   || exit 1
      git tag -a -m"${REP} ${version} for larsoft ${larsoft_version}" ${version}  || exit 1
      git push origin master ${version} || exit 1
    fi
}

function maybe_tag_branch() {
    local mybranch=$1
    local myver=$2
    have_tag=`git tag | grep '^'"$myver"'\$' | wc -w`
    #echo "checking for ${myver} in  ${REP} - found ${have_tag}"
    have_upstream=`git remote -v | grep upstream | wc -l`
    #echo "have_upstream is ${have_upstream}"
    this_branch=`git status | grep "On branch" | cut -f 3 -d" "`
    #echo "on branch ${this_branch}"
    if (( ${have_tag} > 0 )); then
      echo "tag $myver already exists: doing nothing."
    elif (( ${have_upstream} > 0 )); then
      echo "working on a fork in ${REP}"
      echo "This should not happen if when tagging a branch - check and fix"
      exit 1
    elif [[ "${this_branch}" != "${mybranch}" ]]; then
      echo "ERROR: on branch ${this_branch}"
      echo "       expect to be on branch ${mybranch}"
      exit 1
    else
      echo "ready to tag ${REP} on branch ${mybranch}"
      git pull  || exit 1
      git tag -a -m"${REP} ${version} for larsoft ${larsoft_version}" ${version}  || exit 1
      git push origin ${mybranch} ${version} || exit 1
    fi
}

################################################################################

# Determine command options (just -h for help)
while getopts ":h" OPTION
do
    case $OPTION in
        h   ) usage ; exit 0 ;;
        *   ) echo "ERROR: Unknown option" ; usage ; exit 1 ;;
    esac
done

# Capture the tag
flow=${1}
tag=${2}
if [ -z "${flow}" ]
then
    echo 'ERROR: no options specified'
    usage
    exit 1
fi

# check for a valid command
case $flow in
    start ) ;;
    update ) ;;
#    commit ) ;;
#    pr ) ;;
    tag ) ;;
    tagbranch ) tagbranch=${2}; tag=${3} ;;
    merge ) ;;
    *   ) echo "ERROR: Unknown option $flow" ; usage ; exit 1 ;;
esac


if [ -z "${MRB_SOURCE}" ]
then
    echo 'ERROR: MRB_SOURCE must be defined'
    echo '       source the appropriate localProductsXXX/setup'
    exit 1
fi

if [ ! -r $MRB_SOURCE/CMakeLists.txt ]; then
    echo "$MRB_SOURCE/CMakeLists.txt not found"
    exit 1
fi

if [ -z "${tag}" ]
then
    echo 'ERROR: no tag specified'
    usage
    exit 1
fi

# pkglist is not required for this step
if [ "${flow}" = "update" ]
then
  case  ${tag} in
    major ) ;;
    minor ) ;;
    micro ) ;;
    * ) echo "ERROR: unrecognized option ${tag}"
        echo "       Please specify major, minor, or micro."
	exit 1; ;;
  esac
  echo "calling updateVersion ${tag}"
  updateVersion ${tag}
  exit 0
fi

# find the directories
# ignore any directory that does not contain ups/product_deps
list=`ls $MRB_SOURCE -1`
for file in $list
do
   if [ -d $file ]
   then
     if [ -r $file/ups/product_deps ]
     then
       pkglist="$file $pkglist"
     fi
   fi
done

if [ "${flow}" = "start" ]
then
  branch=release/${tag}
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     have_branch=`git branch | grep ${branch} | wc -l`
     if (( ${have_branch} > 0 )); then
       echo "${REP} ${branch} exists"
       git checkout ${branch}
       okflow=$?
     else
       echo "create ${REP} ${branch}"
       git checkout develop
       git checkout -b release/${tag}
       okflow=$?
     fi
     if [ ! ${okflow} ]
     then
	echo "${REP} git checkout -b release failure: ${okflow}"
	exit 1
     fi
  done
fi

if [ "${flow}" = "tag" ]
then
  #larsoft_version=`grep larsoft ${MRB_SOURCE}/larsoft/ups/product_deps | grep parent | tr -s '[:space:]' | cut -f3 -d " "`
  larsoft_version=v`grep larsoft CMakeLists.txt | grep project | tr -s '[:space:]' | cut -f3 -d " " | sed 's/\./_/g'`
  echo "found larsoft_version ${larsoft_version}"
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     # make sure we are on the expected branch
     git checkout release/${tag}  || exit 1
  ##   version=`grep ${REP} ups/product_deps | grep parent | sed -e 's/[[:space:]]/ /g' | cut -f3 -d " "`
     version=v`grep ${REP} CMakeLists.txt | grep project | tr -s '[:space:]' | cut -f3 -d " " | sed 's/\./_/g'`
     echo "begin ${REP} ${version}"
     commit_ups_product_deps
     maybe_tag "${version}"
  done
fi

if [ "${flow}" = "tagbranch" ]
then
  if [ -z "${tagbranch}" ]; then
    echo 'ERROR: no existing branch specified'
    usage
    exit 1
  fi
  larsoft_version=`grep larsoft ${MRB_SOURCE}/larsoft/ups/product_deps | grep parent | tr -s '[:space:]' | cut -f3 -d " "`
  echo "found larsoft_version ${larsoft_version} for ${tag} on ${tagbranch}"
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     # make sure we are on the expected branch
     git checkout ${tagbranch}  || exit 1
     version=`grep ${REP} ups/product_deps | grep parent | sed -e 's/[[:space:]]/ /g' | cut -f3 -d " "`
     echo "begin ${REP} ${version}"
     commit_ups_product_deps
     maybe_tag_branch "${tagbranch}" "${version}"
  done
fi

if [ "${flow}" = "merge" ]
then
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     echo "begin ${REP}"
     have_upstream=`git remote -v | grep upstream | wc -l`
     echo "have_upstream is ${have_upstream}"
     git checkout develop  || { echo "ERROR: git checkout develop failed"; exit 1; }
     if (( ${have_upstream} > 0 )); then
       git pull upstream develop || { echo "ERROR: git pull develop failed"; exit 1; }
       git merge -m"larsoft ${tag}" master  || { echo "ERROR: git merge failed"; exit 1; }
       git push upstream develop  || { echo "ERROR: git push develop failed"; exit 1; }
     else
       git pull || { echo "ERROR: git pull develop failed"; exit 1; }
       git merge -m"larsoft ${tag}" master  || { echo "ERROR: git merge failed"; exit 1; }
       git push origin develop  || { echo "ERROR: git push develop failed"; exit 1; }
     fi
  done
fi

exit 0

# The commit option is disabled
if [ "${flow}" = "commit" ]
then
  branch=release/${tag}
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     # make sure we are on the expected branch
     git checkout ${branch}  || exit 1
     # check status
     modified_files=`git status | grep modified | wc -l`
     new_product_deps=`git status | grep product_deps | wc -l`
     version=`grep ${REP} ups/product_deps | grep parent | sed -e 's/[[:space:]]/ /g' | cut -f3 -d " "`
     if (( ${modified_files} == 0 )); then
       echo "nothing to commit in ${REP}"
     elif (( ${modified_files} == 1 )); then
       if (( ${new_product_deps} == 1 )); then
         echo "begin ${REP} ${version}"
         git commit -m"${REP} ${version} for larsoft ${tag}" ups/product_deps  || exit 1
         hub fork --remote-name=origin
         git push origin ${branch} || exit 1
       else
         echo "please commit changes other than product_deps in ${REP}"
         exit 1
       fi
     else
       echo "please commit changes other than product_deps in ${REP}"
       exit 1
     fi
  done
fi

# The pr option is disabled
if [ "${flow}" = "pr" ]
then
  cfg_file=${MRB_SOURCE}/larsoft-${tag}-prs
  pkgPRs=()
  echo "" > ${cfg_file}
  for REP in $pkglist
  do
     cd ${MRB_SOURCE}/${REP}
     echo "begin ${REP}"
     modified_files=`git status | grep modified | wc -l`
     if (( ${modified_files} > 0 )); then
       echo "please commit changes in ${REP}"
       exit 1
     fi
     version=`grep ${REP} ups/product_deps | grep parent | sed -e 's/[[:space:]]/ /g' | cut -f3 -d " "`
     pr_name=`hub pull-request -m\"${REP} ${version} for larsoft ${tag}\"`
     okflow=$?
     if [ ! ${okflow} ]
     then
	echo "${REP} hub pull-request failure: ${okflow}"
	exit 1
     fi
     echo " ${pr_name}" >> ${cfg_file}
     pkgPRs+=("${pr_name}")
  done
  echo "" >> ${cfg_file}
  echo "buildPR -q <quals> <build dir> ${pkgPRs[*]}" >> ${cfg_file}
  echo "" >> ${cfg_file}
fi
