#!/usr/bin/env bash

# release versions are vaa_bb_cc
# This script will increment cc by one

# Usage function
function usage()
{
    echo "Usage: $fullCom [-d|-h] <major|minor|micro>"
    echo "  Increase release number by one as requested"
    echo
    echo "        major - increment major release number, minor and micro will be zero"
    echo "        minor - increment minor release number, micro will be zero"
    echo "        micro - increment micro release nuber"
    echo
    echo " options:"
    echo "   -h - this help"
    echo "   -d - dry run, no changes will be made"
    echo
    echo "  Release numbers are read from \$MRB_SOURCE/*/ups/product_deps"
}

# increment the major version
function calculateMajorUpdate()
{
  local version=$1
  newversion=empty
  oldmajor=`echo $version | cut -f1 -d"_" | sed -e 's/^v//' | sed -e 's/^0//'`
  minor=`echo $version | cut -f2 -d"_"`
  micro=`echo $version | cut -f3 -d"_"`
  newmajor=$(($oldmajor+1))
  majorlen=${#newmajor}
  #echo "updating $input $package $version"
  #echo "  $major $newmajor ${#newmajor}"
  if [[ ${majorlen} == 1 ]]; then
     newversion="v0${newmajor}_00_00"
  else
     newversion="v${newmajor}_00_00"
  fi
}

# increment the minor version
function calculateMinorUpdate()
{
  local version=$1
  newversion=empty
  major=`echo $version | cut -f1 -d"_"`
  oldminor=`echo $version | cut -f2 -d"_" | sed -e 's/^0//'`
  micro=`echo $version | cut -f3 -d"_"`
  newminor=$(($oldminor+1))
  minorlen=${#newminor}
  ##echo "updating $input $package $version"
  ##echo "  $major $minor $newminor ${#newminor}"
  if [[ ${minorlen} == 1 ]]; then
     newversion="${major}_0${newminor}_00"
  else
     newversion="${major}_${newminor}_00"
  fi
}

# increment the micro version
function calculateMicroUpdate()
{
  local version=$1
  newversion=empty
  major=`echo $version | cut -f1 -d"_"`
  minor=`echo $version | cut -f2 -d"_"`
  oldmicro=`echo $version | cut -f3 -d"_" | sed -e 's/^0//'`
  newmicro=$(($oldmicro+1))
  microlen=${#newmicro}
  ##echo "updating $input $package $version"
  ##echo "  $major $minor $newmicro ${#newmicro}"
  if [[ ${microlen} == 1 ]]; then
     newversion="${major}_${minor}_0${newmicro}"
  else
     newversion="${major}_${minor}_${newmicro}"
  fi
}

function get_version()
{
  local package=$1
  ##echo "checking package ${package}"
  oldversion=v`grep '^[  ]*project' ${REP}/CMakeLists.txt | grep ${package} | tr -s '[:space:]' | cut -f3 -d " " | sed 's/\./_/g'`
  # possible old style package
  if [[ ${oldversion} == v ]]; then
    oldversion=`grep '^[  ]*parent' ${REP}/ups/product_deps | tr "\t" " " | cut -f3 -d" "`
  fi
  # dealing with larpandoracontent
  if [[ ${oldversion} == vVERSION ]]; then
    oldversion=v`grep '^[  ]*project' ${REP}/CMakeLists.txt | grep ${package} | tr -s '[:space:]' | cut -f4 -d " " | sed 's/\./_/g' | sed 's/)//'`
  fi
  ##echo "Found ${package} ${oldversion}"
}

#########################################################

# Determine this command name
thisComFull=$(basename $0)
thisDirFull=$(dirname $0)
fullCom="${thisComFull%.*}"

# Determine command options (just -h for help)
while getopts ":dh" OPTION
do
    case $OPTION in
        h   ) usage ; exit 0 ;;
        d   ) dry_run=true ;;
        *   ) echo "ERROR: Unknown option" ; usage ; exit 1 ;;
    esac
done
shift `expr $OPTIND - 1`
OPTIND=1

# Capture the type
type=${1}

if [ -z "${MRB_SOURCE}" ]
then
    echo 'ERROR: MRB_SOURCE must be defined'
    echo '       source the appropriate localProductsXXX/setup'
    exit 1
fi

if [ ! -r $MRB_SOURCE/CMakeLists.txt ]; then
    echo "$MRB_SOURCE/CMakeLists.txt not found"
    exit 1
fi

case $type in
  major ) ;;
  minor ) ;;
  micro ) ;;
  * ) echo 'ERROR: please specify major, minor, or micro'; usage ; exit 1 ;; 
esac

# find the directories
# ignore any directory that does not contain ups/product_deps
list=`ls $MRB_SOURCE -1`
for file in $list
do
   if [ -d $file ]
   then
     if [ -r $file/ups/product_deps ]
     then
       pkglist="$file $pkglist"
     fi
   fi
done

for REP in $pkglist
do
   echo
   ##parentline=`grep ^parent ${REP}/ups/product_deps`
   ##echo ${parentline}
   ##oldversion=`echo ${parentline} | cut -f3 -d" "`
   oldversion=empty
   get_version ${REP}
   ##echo "ready to calculate new version for ${REP} ${oldversion}"
   if [[ ${type} == major ]]; then
     calculateMajorUpdate ${oldversion}
   elif [[ ${type} == minor ]]; then
     calculateMinorUpdate ${oldversion}
   elif [[ ${type} == micro ]]; then
     calculateMicroUpdate ${oldversion}
   fi
   echo "updating ${REP} from ${oldversion} to ${newversion}"
   if [[ ${dry_run} == "true" ]]; then
     echo "dry run - no change"
   else
     mrb uv ${REP} ${newversion}
   fi
done
