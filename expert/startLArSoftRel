#!/usr/bin/env bash

# just make a working directory
# code will be checked out from github

# Determine this command name
thisComFull=$(basename $0)
fullCom="${thisComFull%.*}"

# Usage function
function usage() {
    echo "Usage: $fullCom <working_dir> <new tag> <base qualifier> [argoneut|dune|icarus|lariat|sbnd|uboone]"
    echo "       mkdir <working_dir>/<tag>"
    echo "       run newDev"
    echo "       git clone larsoft and specified experiment repositories from github"
    echo "  The base qualifier should be one of e20, e26, c14 etc."
    echo "  If the fourth argument is not specified, all experiment repositories will be cloned."
    echo
}

create_working_directory() {
  if [ -z "${working_dir}" ]
  then
      echo 'ERROR: the working directory was not specified'
      echo
      usage
      exit 1
  fi
  if [ -d ${working_dir}/${tag} ]
  then
      echo "INFO:  ${working_dir}/${tag} already exists!"
      echo "INFO:  adding build directories for ${basequal}"
  fi
  if [ -d ${working_dir}/${tag}/${basequal}p ]
  then
      echo "ERROR:  ${working_dir}/${tag}/${basequal}p already exists!"
      usage
      exit 1
  fi
  mkdir -p ${working_dir}/${tag} || { echo "ERROR: failed to create ${working_dir}/${tag}"; exit 1; }
  mkdir -p ${working_dir}/${tag}/${basequal}p  || { echo "ERROR: failed to create ${working_dir}/${tag}/${basequal}p"; exit 1; }
  mkdir -p ${working_dir}/${tag}/${basequal}d || { echo "ERROR: failed to create ${working_dir}/${tag}/${basequal}d"; exit 1; }
  cd ${working_dir}/${tag}
  echo "run mrb newDev"
  mrb newDev -f -v ${tag} -q ${basequal}:prof -T ${basequal}p || exit 1
  mrb newDev -f -v ${tag} -q ${basequal}:debug -T ${basequal}d || exit 1
  echo "source localProductsXXX/setup"
  source ${basequal}p/localProducts*/setup
  cd $MRB_SOURCE
  if [ ! -d ${MRB_SOURCE}/larsoft ]; then
    echo "checkout larsoft_suite"
    mrb g --repo-type github larsoft_suite
  fi
  if [ ! -d ${MRB_SOURCE}/larsoftobj ]; then
    echo "checkout larsoftobj_suite"
    mrb g --repo-type github larsoftobj_suite
  fi
  if [ ! -d ${MRB_SOURCE}/larbatch ]; then
    echo "checkout larbatch"
    mrb g --repo-type github larbatch
  fi
  if [ ! -d ${MRB_SOURCE}/larutils ]; then
    echo "checkout larutils"
    mrb g --repo-type github larutils
  fi
  if [ ! -d ${MRB_SOURCE}/larpandoracontent ]; then
    echo "checkout larpandoracontent"
    mrb g --repo-type github larpandoracontent
  fi
  # look for extra options 
  if [ -z "${extra_options}" ]; then
    if [ ! -d ${MRB_SOURCE}/duneana ]; then
      echo "checkout dune suite"
      mrb g dune_suite
    fi
    if [ ! -d ${MRB_SOURCE}/uboonecode ]; then
      echo "checkout uboonecode"
      mrb  g uboone_suite
    fi
    if [ ! -d ${MRB_SOURCE}/argoneutcode ]; then
      echo "checkout argoneutcode"
      mrb g argoneutcode
    fi
  elif [[ ${extra_options} == "argoneut" ]]; then
    echo "checkout argoneutcode"
    mrb g argoneutcode
  elif [[ ${extra_options} == "dune" ]]; then
    echo "checkout dune suite"
    mrb g dune_suite
  elif [[ ${extra_options} == "icarus" ]]; then
    echo "checkout icaruscode"
    mrb g icaruscode
    mrb g icarusutil
  elif [[ ${extra_options} == "lariat" ]]; then
    echo "checkout lariatsoft"
    mrb g lariatsoft
    mrb g -d lariatfragments lariat-online-lariatfragments
    mrb g -d lariatutil lardbt-lariatutil
  elif [[ ${extra_options} == "sbnd" ]]; then
    echo "checkout sbndcode"
    mrb g sbndcode
    mrb g sbndutil
  elif [[ ${extra_options} == "uboone" ]]; then
    echo "checkout uboonecode"
    mrb  g uboone_suite
  else
    echo "ERROR: unrecognized option ${extra_options}"
    exit 1
  fi
}

# Determine command options (just -h for help)
while getopts ":h" OPTION
do
    case $OPTION in
        h   ) usage ; exit 0 ;;
        *   ) echo "ERROR: Unknown option" ; usage ; exit 1 ;;
    esac
done

working_dir=${1}
tag=${2}
basequal=${3}
extra_options=${4}

if [ -z "${working_dir}" ]
then
    echo 'ERROR: no working directory specified'
    usage
    exit 1
fi
if [ -z "${tag}" ]
then
    echo 'ERROR: no tag specified'
    usage
    exit 1
fi
if [ -z "${basequal}" ]
then
    echo 'ERROR: no basequal specified'
    usage
    exit 1
fi

create_working_directory 

exit 0

